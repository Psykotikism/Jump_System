"Games"
{
	"#default"
	{
		"#supported"
		{
			"game"		"left4dead"
			"game"		"left4dead2"
		}

		"Functions"
		{
			/**
			 * CBaseEntity::GetGroundEntity()
			 *
			 * Note: Detouring as a pre-hook for allowing midair dashes.
			 **/
			"JSDetour_CBaseEntity::GetGroundEntity"
			{
				"signature"	"CBaseEntity::GetGroundEntity"
				"callconv"	"thiscall"
				"return"	"cbaseentity"
				"this"		"entity"
			}

			/**
			 * CDeathFallCamera::Enable(CBasePlayer*)
			 *
			 * Note: Detouring as a pre-hook for disabling "death_fall_camera" entity per player.
			 **/
			"JSDetour_CDeathFallCamera::Enable"
			{
				"signature"	"CDeathFallCamera::Enable"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"player"
					{
						"type"		"cbaseentity"
					}
				}
			}

			/**
			 * CTerrorGameMovement::CheckJumpButton()
			 *
			 * Note: Detouring as a pre-hook for enabling "CBaseEntity::GetGroundEntity" detour.
			 * Note: Detouring as a post-hook for disabling "CBaseEntity::GetGroundEntity" detour.
			 **/
			"JSDetour_CTerrorGameMovement::CheckJumpButton"
			{
				"signature"	"CTerrorGameMovement::CheckJumpButton"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"address"
			}

			/**
			 * CTerrorGameMovement::DoJump(Vector*)
			 *
			 * Note: Detouring as a pre-hook for patching max jump height per player.
			 * Note: Detouring as a post-hook for removing patch for max jump height.
			 **/
			"JSDetour_CTerrorGameMovement::DoJump"
			{
				"signature"	"CTerrorGameMovement::DoJump"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"address"
				"arguments"
				{
					"velocity"
					{
						"type"		"vectorptr"
					}
				}
			}

			/**
			 * CTerrorPlayer::OnFalling()
			 *
			 * Note: Detouring as a pre-hook for catching falling survivors and patching fall scream cancellation.
			 * Note: Detouring as a post-hook for removing patch for fall scream cancellation.
			 **/
			"JSDetour_CTerrorPlayer::OnFalling"
			{
				"signature"	"CTerrorPlayer::OnFalling"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
			}
		}

		"Addresses"
		{
			/**
			 * This is the initial method for finding the default jump height (57.0) using its byte signature.
			 * If this method fails, the plugin will rely on the "DoJumpValueRead" method instead.
			 **/
			"DoJumpValueBytes"
			{
				"signature"	"CTerrorGameMovement::DoJump::Value"
			}
		}

		"Offsets"
		{
			/**
			 * Linux, Mac, and Windows servers are supported.
			 **/
			"OS"
			{
				"linux"		"2"
				"mac"		"1"
				"windows"	"0"
			}

			/**
			 * CBaseEntity::GetRefEHandle()
			 *
			 * How to find:
			 * 1. Use asherkin's VTable dump.
			 **/
			"CBaseEntity::GetRefEHandle"
			{
				"linux"		"3"
				"mac"		"3"
				"windows"	"2"
			}
		}
	}

	"left4dead"
	{
		"MemPatches"
		{
			/**
			 * CTerrorPlayer::OnFalling()
			 *
			 * Note: Patches the "CBaseEntity::EmitTrackedSound" call for "Player.Fall".
			 *
			 * How to find on Linux/Mac:
			 * 1. Locate the "Player.Fall" string.
			 * 2. The instruction should look like a function call.
			 *
			 * How to find on Windows:
			 * 1. Locate the "Player.Fall" string.
			 * 2. The instruction should look like a function call.
			 * 3. Look for the 6-byte float (FLD) instruction right before a PUSH instruction above that function call.
			 * 4. The length of the JMP instruction patch will be determined by the following equation:
			 * Let a1 = Address of the patch location + two bytes (because the patch itself takes two bytes)
			 * Let a2 = Address of the start of the setup for the 2-byte JMP instruction
			 * Equation: a2 - a1 = JMP instruction length
			 **/
			"JSPatch_FallScreamMute"
			{
				"signature"	"CTerrorPlayer::OnFalling"
				"linux"
				{
					"offset"	"397" // start at E8 and patch 5 bytes with NOPs (0x90)
					"verify"	"\xE8"
					"patch"		"\x90\x90\x90\x90\x90"
				}
				"mac"
				{
					"offset"	"850" // start at E8 and patch 5 bytes with NOPs (0x90)
					"verify"	"\xE8"
					"patch"		"\x90\x90\x90\x90\x90"
				}
				"windows"
				{
					"offset"	"611" // start at D9 and patch 2 bytes with a short jump (0xEB) to skip instruction
					"verify"	"\xD9"
					"patch"		"\xEB\x10"
				}
			}
		}

		"Addresses"
		{
			/**
			 * This is the failsafe method for finding the default jump height (57.0) by jumping to its location.
			 * If the "DoJumpValueBytes" method fails, the plugin will rely on this method instead.
			 *
			 * Note: This method only works on Mac/Windows, since on Linux, it just points to the offset's address not the value's actual address.
			 **/
			"DoJumpValueRead"
			{
				"signature"	"CTerrorGameMovement::DoJump"
				"mac"
				{
					"read"		"209"
				}
				"windows"
				{
					"read"		"174"
				}
				"read"		"0"
			}

			/**
			 * PlayerLocomotion::GetMaxJumpHeight()
			 *
			 * Note: Uses the signature for "PlayerLocomotion::GetMaxJumpHeight" to find the address.
			 **/
			"GetMaxJumpHeightStart"
			{
				"linux"
				{
					"signature"	"PlayerLocomotion::GetMaxJumpHeight"
				}
				"mac"
				{
					"signature"	"PlayerLocomotion::GetMaxJumpHeight"
				}
			}
		}

		"Offsets"
		{
			/**
			 * PlayerLocomotion::GetMaxJumpHeight()
			 *
			 * Note for Mac/Windows users: This isn't required.
			 *
			 * How to find:
			 * 1. Look at the instructions for "PlayerLocomotion::GetMaxJumpHeight".
			 * 2. Find the instruction that adds an offset before pushing "57.0" value.
			 * 3. Get the offset of the third byte.
			 **/
			"PlayerLocomotion::GetMaxJumpHeight::Add"
			{
				"linux"		"7"
			}

			/**
			 * PlayerLocomotion::GetMaxJumpHeight()
			 *
			 * Note for Mac/Windows users: This isn't required.
			 *
			 * How to find:
			 * 1. Look at the instructions for "PlayerLocomotion::GetMaxJumpHeight".
			 * 2. Find the instruction that adds an offset before pushing "57.0" value.
			 **/
			"PlayerLocomotion::GetMaxJumpHeight::Call"
			{
				"linux"		"5"
			}

			/**
			 * PlayerLocomotion::GetMaxJumpHeight()
			 *
			 * Note for Mac/Windows users: This isn't required.
			 *
			 * How to find:
			 * 1. Look at the instructions for "PlayerLocomotion::GetMaxJumpHeight".
			 * 2. Find the instruction that pushes the "57.0" value.
			 * 3. Get the offset of the third byte.
			 **/
			"PlayerLocomotion::GetMaxJumpHeight::Value"
			{
				"linux"		"13"
			}
		}

		"Signatures"
		{
			/**
			 * CBaseEntity::GetGroundEntity()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorGameMovement::CheckJumpButton" function.
			 * 2. This function is called in an if-statement by itself without any comparison checks.
			 **/
			"CBaseEntity::GetGroundEntity"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity15GetGroundEntityEv"
				"mac"		"@_ZN11CBaseEntity15GetGroundEntityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x81\x2A\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xC3\x33\x2A\xC3\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57"
						/* ? ? ? ? ? ? 83 ? ? 74 ? 8B ? ? ? ? ? 8B ? 81 ? ? ? ? ? C1 ? ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? C3 33 ? C3 ? ? ? ? ? ? ? ? ? ? ? ? ? ? 56 57 */
			}

			/**
			 * CDeathFallCamera::Enable(CBasePlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SurvivorStandingOnCar" string.
			 * 2. The string can only be found in "CTerrorPlayer::OnGroundChanged".
			 * 3. Look for the "point_deathfall_camera" string in "CTerrorPlayer::OnGroundChanged".
			 * 4. The first function call after that string's reference should be "CBasePlayer::ClearZoomOwner".
			 * 5. One of the functions that calls "CBasePlayer::ClearZoomOwner" should be this function.
			 **/
			"CDeathFallCamera::Enable"
			{
				"library"	"server"
				"linux"		"@_ZN16CDeathFallCamera6EnableEP11CBasePlayer"
				"mac"		"@_ZN16CDeathFallCamera6EnableEP11CBasePlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x6A"
						/* ? ? ? ? ? ? 8B ? 8B ? E8 ? ? ? ? 85 ? 74 ? 6A */
			}

			/**
			 * CTerrorGameMovement::CheckJumpButton()
			 *
			 * How to find on Windows:
			 * 1a. Locate the "CTerrorGameMovement::DoJump" function.
			 * 2a. One of the functions that calls "CTerrorGameMovement::DoJump" should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorGameMovement::`vftable'" to jump to the "CTerrorGameMovement" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorGameMovement::CheckJumpButton"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement15CheckJumpButtonEv"
				"mac"		"@_ZN19CTerrorGameMovement15CheckJumpButtonEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x80\xB8\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x2A\x2A\x83\x2A\x2A\x2A\x32\x2A\x5E\xC3"
						/* ? ? ? ? ? ? ? ? ? 85 ? 74 ? 80 B8 ? ? ? ? ? 74 ? 8B ? ? 83 ? ? ? 32 ? 5E C3 */
			}

			/**
			 * CTerrorGameMovement::DoJump(Vector*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "player_jump" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameMovement::DoJump"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement6DoJumpEP6Vector"
				"mac"		"@_ZN19CTerrorGameMovement6DoJumpEP6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\x6A\x2A\xFF\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x6A\x2A\x6A"
						/* ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? 57 6A ? FF ? 8B 8E ? ? ? ? 8B ? 8B 90 ? ? ? ? 6A ? 6A */
			}

			/**
			 * CTerrorGameMovement::DoJump(Vector*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "57.0" value in the "CTerrorGameMovement::DoJump" function.
			 * 2. Go to the instruction for that line in the code.
			 * 3. Double-click the offset that represents that value to get the address.
			 **/
			"CTerrorGameMovement::DoJump::Value"
			{
				"library"	"server"
				"linux"		"\x00\x00\x64\x42\x00\x00\xC8\x44"
				"mac"		"\x00\x00\x00\x00\x00\x80\x4C\x40"
				"windows"	"\x00\x00\x00\x00\x00\x80\x4C\x40"
			}

			/**
			 * CTerrorPlayer::OnFalling()
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerZombie.Fall" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::OnFalling"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer9OnFallingEv"
				"mac"		"@_ZN13CTerrorPlayer9OnFallingEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8D"
						/* ? ? ? ? ? ? 57 8B ? E8 ? ? ? ? 83 ? ? 0F 85 ? ? ? ? 8D */
			}
		}
	}

	"left4dead2"
	{
		"MemPatches"
		{
			/**
			 * CTerrorPlayer::OnFalling()
			 *
			 * Note: Patches the "CBaseEntity::EmitTrackedSound" call for "Player.Fall".
			 *
			 * How to find on Linux/Mac:
			 * 1. Locate the "Player.Fall" string.
			 * 2. The instruction should look like a function call.
			 *
			 * How to find on Windows:
			 * 1. Locate the "Player.Fall" string.
			 * 2. The instruction should look like a function call.
			 * 3. Look for the 6-byte float (FLD) instruction right before a PUSH instruction above that function call.
			 * 4. The length of the JMP instruction patch will be determined by the following equation:
			 * Let a1 = Address of the patch location + two bytes (because the patch itself takes two bytes)
			 * Let a2 = Address of the start of the setup for the 2-byte JMP instruction
			 * Equation: a2 - a1 = JMP instruction length
			 **/
			"JSPatch_FallScreamMute"
			{
				"signature"	"CTerrorPlayer::OnFalling"
				"linux"
				{
					"offset"	"678" // start at E8 and patch 5 bytes with NOPs (0x90)
					"verify"	"\xE8"
					"patch"		"\x90\x90\x90\x90\x90"
				}
				"mac"
				{
					"offset"	"880" // start at E8 and patch 5 bytes with NOPs (0x90)
					"verify"	"\xE8"
					"patch"		"\x90\x90\x90\x90\x90"
				}
				"windows"
				{
					"offset"	"552" // start at D9 and patch 2 bytes with a short jump (0xEB) to skip instruction
					"verify"	"\xD9"
					"patch"		"\xEB\x10"
				}
			}
		}

		"Addresses"
		{
			/**
			 * This is the failsafe method for finding the default jump height (57.0) by jumping to its location.
			 * If the "DoJumpValueBytes" method fails, the plugin will rely on this method instead.
			 **/
			"DoJumpValueRead"
			{
				"signature"	"CTerrorGameMovement::DoJump"
				"linux"
				{
					"read"		"671"
				}
				"mac"
				{
					"read"		"231"
				}
				"windows"
				{
					"read"		"86"
				}
				"read"		"0"
			}
		}

		"Signatures"
		{
			/**
			 * CBaseEntity::GetGroundEntity()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorGameMovement::CheckJumpButton" function.
			 * 2. This function is called in an if-statement by itself without any comparison checks.
			 **/
			"CBaseEntity::GetGroundEntity"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity15GetGroundEntityEv"
				"mac"		"@_ZN11CBaseEntity15GetGroundEntityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x81\x2A\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xC3\x33\x2A\xC3\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xF6\x81"
						/* ? ? ? ? ? ? 83 ? ? 74 ? 8B ? ? ? ? ? 8B ? 81 ? ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? C3 33 ? C3 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? F6 81 */
			}

			/**
			 * CDeathFallCamera::Enable(CBasePlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SurvivorStandingOnCar" string.
			 * 2. The string can only be found in "CTerrorPlayer::OnGroundChanged".
			 * 3. Look for the "point_deathfall_camera" string in "CTerrorPlayer::OnGroundChanged".
			 * 4. The first function call after that string's second reference should be "CBasePlayer::ClearZoomOwner".
			 * 5. One of the functions that calls "CBasePlayer::ClearZoomOwner" should be this function.
			 **/
			"CDeathFallCamera::Enable"
			{
				"library"	"server"
				"linux"		"@_ZN16CDeathFallCamera6EnableEP11CBasePlayer"
				"mac"		"@_ZN16CDeathFallCamera6EnableEP11CBasePlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x8B\x2A\x89\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85"
						/* ? ? ? ? ? ? ? ? 57 8B ? 8B ? 89 ? ? E8 ? ? ? ? 85 */
			}

			/**
			 * CTerrorGameMovement::CheckJumpButton()
			 *
			 * How to find on Windows:
			 * 1a. Locate the "CTerrorGameMovement::DoJump" function.
			 * 2a. One of the functions that calls "CTerrorGameMovement::DoJump" should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorGameMovement::`vftable'" to jump to the "CTerrorGameMovement" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorGameMovement::CheckJumpButton"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement15CheckJumpButtonEv"
				"mac"		"@_ZN19CTerrorGameMovement15CheckJumpButtonEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x80\xB8\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x2A\x2A\x83\x2A\x2A\x2A\x32\x2A\x5E\xC3"
						/* ? ? ? ? ? ? ? ? ? 85 ? 74 ? 80 B8 ? ? ? ? ? 74 ? 8B ? ? 83 ? ? ? 32 ? 5E C3 */
			}

			/**
			 * CTerrorGameMovement::DoJump(Vector*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "player_jump" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameMovement::DoJump"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement6DoJumpEP6Vector"
				"mac"		"@_ZN19CTerrorGameMovement6DoJumpEP6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\x6A\x2A\xFF\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x6A\x2A\x6A"
						/* ? ? ? ? ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? 57 6A ? FF ? 8B 8E ? ? ? ? 8B ? 8B 90 ? ? ? ? 6A ? 6A */
			}

			/**
			 * CTerrorGameMovement::DoJump(Vector*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "57.0" value in the "CTerrorGameMovement::DoJump" function.
			 * 2. Go to the instruction for that line in the code.
			 * 3. Double-click the offset that represents that value to get the address.
			 **/
			"CTerrorGameMovement::DoJump::Value"
			{
				"library"	"server"
				"linux"		"\x00\x00\x00\x00\x00\x80\x4C\x40"
				"mac"		"\x00\x00\x00\x00\x00\x80\x4C\x40"
				"windows"	"\x00\x00\x00\x00\x00\x80\x4C\x40"
			}

			/**
			 * CTerrorPlayer::OnFalling()
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerZombie.Fall" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::OnFalling"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer9OnFallingEv"
				"mac"		"@_ZN13CTerrorPlayer9OnFallingEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 57 8B ? E8 ? ? ? ? 83 ? ? 0F */
			}
		}
	}
}